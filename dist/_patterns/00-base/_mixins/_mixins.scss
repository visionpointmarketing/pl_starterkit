/* 
 *	some default float/display/width properties we use often.
 *	
 *	usage:
 *		h3{
 *			@include floatblock();
 *		}
 */
@mixin floatblock($dir:left,$width:100%){
	display:block;
	float:$dir;
	width:$width;
}
/* 
 *	Set all font properties. Do a global find/replace within the 
 *	sass/templates/header folders on the $family options below to update.
 *	
 *	usage:
 *		h3{
 *			@include font('Open Sans',16,$white,0);
 *		}
 */
@mixin font($family:"Arial",$size:16,$color:$c-default,$spacing:1.428,$px:"false"){
	color:$color;
	@include font-size($size,$spacing,$px);
	@if $family == 'open_sans'{
		font-family: 'Open Sans', cursive;
	} @else if $family == 'open_sans'{
		font-family:'Open Sans', sans-serif;;
		font-weight:400;
	} @else if $family == 'open_sans_reg'{
		font-family: 'Open Sans',sans-serif;
		font-weight:600;
	} @else if $family == 'open_sans_bold'{
		font-family: 'Open Sans',sans-serif;
		font-weight:700;
	}@else if($family == 'mono'){
		font-family: 'PT Mono';
	}@else {
		font-family:'Open Sans',sans-serif;
	}
}
/* 
 *	Set font-size independant of the font mixin
 *	
 *	usage:
 *		p{
 *			@include font-size(16);
 *		}
 */
@mixin font-size($sizeValue: 16,$lineheight: 1.428,$px:"false") {
	font-size: $sizeValue + px;
	@if $px == "false"{
		font-size: ($sizeValue / 10) + rem;
	}
	line-height: $lineheight;
}
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	before or after the element it's called upon.
 *	
 *	usage:
 *		.button{
 *			@include arrow('before',$white-tl,14,'\f105');
 *		}
 */
@mixin arrow($loc:'after',$color:$white-tl,$font-size:14,$type:"\f105"){
	position:relative;
	&:#{$loc}{
		@if $font-size == "inherit"{
			font-size:inherit;
		} @else {
			@include font-size($font-size);
		}
		content: $type;
		font-family: FontAwesome;
		position: absolute;
		left: -10px;
		color:$color;
	}
}
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	centered and facing down.
 *	
 *	usage:
 *		.button{
 *			@include arrowdown($white-tl,14,'\f105');
 *		}
 */
@mixin arrowdown($color:inherit,$font-size:12,$type:"\f105"){
	position:relative;
	padding-right:20px;
	&:after{
		position: absolute;
		color:$color;
		content: $type;
		font-family: FontAwesome;
		@include font-size($font-size);
		@include calc('top','50% - #{$font-size / 2}px','50%');
		@include transform(rotateZ(90deg));
		padding:0 10px;
		transition:all .2s;
	}
}
/*
 *	Mixin to standardize focus styles. Add this rather than 
 *	styling each individually
 *	
 *	usage:
 *		a{
 *			@include focus_styles();
 *		}
 */
@mixin focus_styles(){
	&:focus{
		outline:2px solid #5B9DD9;
		//outline:1px dotted #000;
	}
}
/*
 *	Using the calc function with fallback support
 *	usage:
 *		li{
 *			@include calc('width','100% - 75px','170px');
 *		}
 */
@mixin calc($prop,$value,$fallback:100%){
	#{$prop}:#{$fallback};
	#{$prop}:-webkit-calc(#{$value});
	#{$prop}:calc(#{$value});
}
/* 
 *	Adds placeholder styles for input fields.
 *	
 *	usage:
 *		input{
 *			@include placeholder{
 *				color:#ccc;
 *				text-shadow:0 0 5px $black-t;
 *			}
 *		}
 */
@mixin placeholder {
	&::-webkit-input-placeholder	{@content}
	&:-moz-placeholder			{@content}
	&::-moz-placeholder			{@content}
	&:-ms-input-placeholder		{@content}
}
/* 
 *	Sets width of items based on sibling count. Used
 *	primarily for navigation menus. The low and high
 *	values can be adjusted to reduce the amount of css
 *	generated. If you're not worried about this, keep the defaults.
 *	Need to add the parent, as the amp; doesn't take the direct parent
 *	but returns the full stack.
 *	
 *	usage (expecting between 4 and 7 total items):
 *		li{
 *			@include sibling_count_prop('li',4,7);
 *		}
 */
@mixin sibling_count_prop($parent:'li',$low:1,$high:10,$property:'width'){
	@for $i from $low through $high{
		&:first-child:nth-last-child(#{$i}),
		&:first-child:nth-last-child(#{$i}) ~ #{$parent} {
			#{$property}: #{100/$i + '%'};
		}
	}
}

@mixin skew($color:$white-tl,$deg:-15deg){
	&:before{
		content:'';
		position:absolute;
		display:block;
		float:left;
		width:100%;
		height:100%;
		left:0;
		top:0;
		background:$color;
		-webkit-transform:skew($deg);
		-ms-transform:skew($deg);
		transform:skew($deg);
		z-index:-1;
	}
}
// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}
/* Mixin */
@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}
@mixin transform($transforms) {
	   -moz-transform: $transforms;
		 -o-transform: $transforms;
		-ms-transform: $transforms;
	-webkit-transform: $transforms;
			transform: $transforms;
}
/* linear gradient  & helpers */
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
						 / nth($conversion-factors, index($convertable-units, unit($value)))
						 * nth($conversion-factors, index($convertable-units, $unit));
	}
	
	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}
/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
	
	@return $is-direction or $is-angle;
}
/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}
	
	$conversion-map: ( 
		to top			: bottom,
		to top right	: bottom left,
		to right top	: left bottom,
		to right		: left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom		: top,
		to bottom left	: top right,
		to left bottom	: right top,
		to left			: right,
		to left top		: right bottom,
		to top left		: bottom right
	);
		
	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}
	
	@return 90deg - convert-angle($value, 'deg');
}
/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}
	
	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}